// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: accounts.sql

package sqlc

import (
	"context"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (
    user_id,
    balance
) VALUES ($1,$2) RETURNING id, user_id, balance, created_at
`

type CreateAccountParams struct {
	UserID  int32   `json:"user_id"`
	Balance float64 `json:"balance"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount, arg.UserID, arg.Balance)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Balance,
		&i.CreatedAt,
	)
	return i, err
}

const getAccountById = `-- name: GetAccountById :one
SELECT id, user_id, balance, created_at FROM accounts WHERE id= $1
`

func (q *Queries) GetAccountById(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountById, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Balance,
		&i.CreatedAt,
	)
	return i, err
}

const getAccountByUserId = `-- name: GetAccountByUserId :one
SELECT id, user_id, balance, created_at FROM accounts WHERE user_id= $1
`

func (q *Queries) GetAccountByUserId(ctx context.Context, userID int32) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountByUserId, userID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Balance,
		&i.CreatedAt,
	)
	return i, err
}

const updateAccountBalance = `-- name: UpdateAccountBalance :one
UPDATE accounts SET balance = $1 WHERE id= $2 RETURNING id, user_id, balance, created_at
`

type UpdateAccountBalanceParams struct {
	Balance float64 `json:"balance"`
	ID      int64   `json:"id"`
}

func (q *Queries) UpdateAccountBalance(ctx context.Context, arg UpdateAccountBalanceParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, updateAccountBalance, arg.Balance, arg.ID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Balance,
		&i.CreatedAt,
	)
	return i, err
}

const updateAccountBalanceNew = `-- name: UpdateAccountBalanceNew :one
UPDATE accounts SET balance = balance + $1 WHERE id = $2 RETURNING id, user_id, balance, created_at
`

type UpdateAccountBalanceNewParams struct {
	Amount float64 `json:"amount"`
	ID     int64   `json:"id"`
}

func (q *Queries) UpdateAccountBalanceNew(ctx context.Context, arg UpdateAccountBalanceNewParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, updateAccountBalanceNew, arg.Amount, arg.ID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Balance,
		&i.CreatedAt,
	)
	return i, err
}
